// <auto-generated />
using System;
using Asilifelis.Data;
using Fido2NetLib.Objects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Asilifelis.Data.Migrations.postgres
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:default_case_insensitive", "und-u-ks-level1,und-u-ks-level1,icu,False")
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Asilifelis.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .IsUnicode(true)
                        .HasColumnType("character varying(4096)");

                    b.Property<byte[]>("IdentityId")
                        .HasColumnType("bytea");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)")
                        .UseCollation("default_case_insensitive");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Asilifelis.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .IsUnicode(true)
                        .HasColumnType("character varying(4096)");

                    b.Property<DateTimeOffset>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Asilifelis.Security.UserIdentity", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<long>("Counter")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("UserIdentity");
                });

            modelBuilder.Entity("Fido2NetLib.Objects.PublicKeyCredentialDescriptor", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<AuthenticatorTransport[]>("Transports")
                        .HasColumnType("jsonb")
                        .HasAnnotation("Relational:JsonPropertyName", "transports");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.ToTable("PublicKeyCredentialDescriptor");
                });

            modelBuilder.Entity("Asilifelis.Models.Actor", b =>
                {
                    b.HasOne("Asilifelis.Security.UserIdentity", "Identity")
                        .WithMany()
                        .HasForeignKey("IdentityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Identity");
                });

            modelBuilder.Entity("Asilifelis.Models.Note", b =>
                {
                    b.HasOne("Asilifelis.Models.Actor", "Author")
                        .WithMany("Notes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Asilifelis.Security.UserIdentity", b =>
                {
                    b.OwnsMany("Asilifelis.Security.Credential", "Credentials", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<byte[]>("DescriptorId")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("PublicKey")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("UserHandle")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.Property<byte[]>("UserIdentityId")
                                .IsRequired()
                                .HasColumnType("bytea");

                            b1.HasKey("Id");

                            b1.HasIndex("DescriptorId");

                            b1.HasIndex("UserIdentityId");

                            b1.ToTable("Credential");

                            b1.HasOne("Fido2NetLib.Objects.PublicKeyCredentialDescriptor", "Descriptor")
                                .WithMany()
                                .HasForeignKey("DescriptorId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("UserIdentityId");

                            b1.Navigation("Descriptor");
                        });

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("Asilifelis.Models.Actor", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
